{"categories":[{"title":"blog","uri":"https://dizang.io/categories/blog/"},{"title":"CSS","uri":"https://dizang.io/categories/css/"},{"title":"development","uri":"https://dizang.io/categories/development/"},{"title":"frontend","uri":"https://dizang.io/categories/frontend/"},{"title":"Git","uri":"https://dizang.io/categories/git/"},{"title":"NPM","uri":"https://dizang.io/categories/npm/"},{"title":"Python","uri":"https://dizang.io/categories/python/"},{"title":"tmux","uri":"https://dizang.io/categories/tmux/"}],"posts":[{"content":"Git delete branch (刪除分支) 每過一段時間，都要定時清理一下專案上分支的數量，不然時間一長，清理起來會很痛苦，所以這邊紀錄一下 Git delete branch (刪除分支) 的語法。\n# 刪除 local 的分支 # 刪除的 branch 必須跟它上游遠端 branch 進度(狀態)一樣，或是在沒有設定追蹤的上游遠端 branch 時，保持在 HEAD (目前所在 branch ) 才可以刪除。 \u0026gt; -d \u0026gt; --delete \u0026gt; git branch (-d | -D) \u0026lt;branch-name\u0026gt; e.g. git branch -d branch_test # 強制刪除 \u0026gt; -D \u0026gt; git branch -D \u0026lt;branch-name\u0026gt; e.g. git branch -D branch_test # 刪除 remote 的分支 # 注意!! - 這邊 : 跟 branch 分支之間是沒有空格的喔。 \u0026gt; git push \u0026lt;remote-name\u0026gt; :\u0026lt;branch-name\u0026gt; e.g. git push origin :branch_test \u0026gt; git push \u0026lt;remote-name\u0026gt; --delete \u0026lt;branch-name\u0026gt; e.g. git push origin --delete branch_test  參考資料 https://git-scm.com/docs/git-branch\nhttps://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely\n","id":0,"section":"posts","summary":"Git delete branch (刪除分支) 每過一段時間，都要定時清理一下專案上分支的數量，不然時間一長，清理起來會很痛苦，所以這邊紀錄一下 Git delete branch (刪除分支) 的語法。","tags":["Git"],"title":"Git delete branch (刪除分支)","uri":"https://dizang.io/posts/git-delete-branch/","year":"2020"},{"content":"Git log 方法 常常過了一段時間之後，再回去看前面的代碼，都會忘記自己當初為什麼會寫這些東西，亦或是要查看別人寫的這段代碼有什麼用意，這時候就會用到 git log 這個指令來幫助自己回憶或是了解當時在幹什麼啦。\n一般用法 # git log # 會顯示以下訊息 commit \u0026lt;commit id\u0026gt; Author: \u0026lt;user name\u0026gt; \u0026lt;user email\u0026gt; Date: Fri Apr 26 23:34:27 2019 +0800 \u0026lt;commit message\u0026gt; # 其中加上 -p 指令，可以顯示每筆提交所做的修改內容 # 後面再加上數字選項 (e.g. -2) 的話，還可以控制要顯示幾筆 commit 如果只想要看到 commit message 呢？ # 使用 --oneline 參數， e.g. git log --oneline # 會顯示以下訊息 \u0026lt;commit id\u0026gt; \u0026lt;commit message\u0026gt; 471d76d test1 700206a test2 d637045 test3 在更進階一點，如果想要在 commit 裡面找特定的關鍵字呢？ # 使用 --grep=\u0026#34;\u0026lt;msg\u0026gt;\u0026#34;， e.g. git log --oneline --grep=\u0026#34;1\u0026#34; # 承接 --oneline 參數使用，方便對照 \u0026lt;commit id\u0026gt; \u0026lt;commit message\u0026gt; 471d76d test1 參考資料 https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History\n","id":1,"section":"posts","summary":"Git log 方法 常常過了一段時間之後，再回去看前面的代碼，都會忘記自己當初為什麼會寫這些東西，亦或是要查看別人寫的這段代碼有什麼用意，這時候就會用到","tags":["Git"],"title":"Git log 使用方法","uri":"https://dizang.io/posts/git-log/","year":"2020"},{"content":"Git branch 重新命名 要重新命名 branch 非常的簡單。\n# 重新命名現在的 branch git branch -m \u0026lt;new-branch-name\u0026gt; # 指定 branch 重新命名 git branch -m \u0026lt;old-branch-name\u0026gt; \u0026lt;new-branch-name\u0026gt; # 更新 local branch 至 remote git push origin -u \u0026lt;new-branch-name\u0026gt; # 刪除 remote 舊的 branch 方法 1. git push origin :\u0026lt;old-branch-name\u0026gt; 方法 2. git push origin --delete \u0026lt;old-branch-name\u0026gt;  參考資料 https://git-scm.com/docs/git-branch\nhttps://stackoverflow.com/questions/6591213/how-do-i-rename-a-local-git-branch\nhttps://linuxize.com/post/how-to-rename-local-and-remote-git-branch/\n","id":2,"section":"posts","summary":"Git branch 重新命名 要重新命名 branch 非常的簡單。 # 重新命名現在的 branch git branch -m \u0026lt;new-branch-name\u0026gt; # 指定 branch 重新命名 git branch -m \u0026lt;old-branch-name\u0026gt; \u0026lt;new-branch-name\u0026gt; # 更新 local branch 至 remote git push origin -u \u0026lt;new-branch-name\u0026gt; # 刪除 remote 舊的 branch 方法 1. git push origin :\u0026lt;old-branch-name\u0026gt;","tags":["Git"],"title":"Git branch 重新命名","uri":"https://dizang.io/posts/git-branch-rename/","year":"2020"},{"content":"紀錄一下 Hugo 的一些常用指令\n// 查看部落格的基本資訊 \u0026gt;\u0026gt; hugo // 查看網站設定資訊 \u0026gt;\u0026gt; hugo config // 建立新的文章 \u0026gt;\u0026gt; hugo new posts/\u0026lt;文章名稱\u0026gt;.md // 建立新網站 \u0026gt;\u0026gt; hugo new site \u0026lt;網站名稱\u0026gt; // 啟用 local server \u0026gt;\u0026gt; hugo server -D // 產生靜態頁面檔案 \u0026gt;\u0026gt; hugo -D // 查看 hugo 版本 \u0026gt;\u0026gt; hugo version  參考資料\nHugo Quick Start\nHugo Basic Usage\n","id":3,"section":"posts","summary":"紀錄一下 Hugo 的一些常用指令 // 查看部落格的基本資訊 \u0026gt;\u0026gt; hugo // 查看網站設定資訊 \u0026gt;\u0026gt; hugo config // 建立新的文章 \u0026gt;\u0026gt; hugo new posts/\u0026lt;文章名稱\u0026gt;.md // 建","tags":["hugo","command"],"title":"Hugo 常用指令","uri":"https://dizang.io/posts/hugo-commands/","year":"2020"},{"content":"Python - 取得終端機執行的指令參數 有時後在執行一些指令進行一些操作時，會習慣從指令直接帶一些參數，好取得特定的資料， 那 python 程式碼要如何取得在終端機執行的指令參數呢？\n很簡單，只要使用 python 標準函式庫 sys 模組裡的 argv 變數就可以了。\n# 範例程式碼 # 在終端機輸入 python demo.py one two three 會有以下輸出結果： \u0026gt;\u0026gt;\u0026gt; import sys \u0026gt;\u0026gt;\u0026gt; print(sys.argv) [\u0026#39;demo.py\u0026#39;, \u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;]  如果要更為複雜的使用終端機輸入的指令的話，可以使用 sys 模組裡的 argparse 變數。\n參考資料 https://docs.python.org/zh-tw/3/tutorial/stdlib.html#command-line-arguments\n","id":4,"section":"posts","summary":"Python - 取得終端機執行的指令參數 有時後在執行一些指令進行一些操作時，會習慣從指令直接帶一些參數，好取得特定的資料， 那 python 程式碼要如何取得在終端機執","tags":["Python"],"title":"Python - 取得終端機執行的指令參數","uri":"https://dizang.io/posts/python-sys-argv/","year":"2020"},{"content":"執行 Git 操作時，發生卡住的狀況 之前有發生過下 Git 指令時，終端機給了我這樣的訊息\nAnother git process seems to be running in this repository, e.g. an editor opened by \u0026#39;git commit\u0026#39;. Please make sure all processes are terminated then try again. If it still fails, a git process may have crashed in this repository earlier: remove the file manually to continue. 後來查了一下，會發生這個原因，通常會是以下 2 種情況造成的\n 同時執行了兩個 Git 的指令時，有可能一個操作是來自終端機，另一個來自 IDE。 有時強制關閉進行中的 Git 操作，這個檔案沒有被自動刪除，之後你就無法進行其他操作。  發生這種狀況的時候，Git 會在此專案的 .git 資料夾裡面產生一個 index.lock 的檔案，通常是在進行某些比較費時的 Git 操作時自動生成，操作結束後會自動刪除，相當於一個鎖定檔案 (保護機制)，目的在於防止對一個目錄同時進行多個操作。\n那要如何解決呢？ 只要刪除 .git 資料夾內的 index.lock 檔案即可。\n# 範例 rm -f .git/index.lock 參考資料 https://stackoverflow.com/questions/38004148/another-git-process-seems-to-be-running-in-this-repository\n","id":5,"section":"posts","summary":"執行 Git 操作時，發生卡住的狀況 之前有發生過下 Git 指令時，終端機給了我這樣的訊息 Another git process seems to be running in this repository, e.g. an editor opened by \u0026#39;git commit\u0026#39;. Please make sure all processes are terminated then try again. If it still fails, a git","tags":["Git"],"title":"執行 Git 操作時，發生卡住的狀況","uri":"https://dizang.io/posts/git-index-lock/","year":"2020"},{"content":"CSS 視窗捲動效果 在做網頁的時，我們為了要讓某些連結點了之後移動到適當的位置，我們會透過 HTML anchor link 定義此連結，達到上述的功能。\n不過這個功能的體驗，感覺就是閃一下，就跳到要顯示的位置上，感覺並不怎麼好，所以這時候就可以使用 CSS 屬性 scroll-behavior 來達到平滑移動的效果啦。\n/* scroll-behavior */ html { scroll-behavior: smooth }  注意：此 scroll-behavior 屬性，目前並不支援 Safari 及 IE 瀏覽器，所以如果想要支援所有瀏覽器的朋友們，可能需要換另一種實作方法了。\n參考資料： https://developer.mozilla.org/zh-CN/docs/Web/CSS/scroll-behavior\n","id":6,"section":"posts","summary":"CSS 視窗捲動效果 在做網頁的時，我們為了要讓某些連結點了之後移動到適當的位置，我們會透過 HTML anchor link 定義此連結，達到上述的功能。 不過這個功能的體驗，感","tags":["CSS"],"title":"CSS 視窗捲動效果","uri":"https://dizang.io/posts/css-scroll-behavior/","year":"2020"},{"content":"NPM 檢查過期套件模組 對於前端開發者來說，相信 NPM (Node Package Manager) 大家一定都不陌生，它是一個線上 JavaScript 套件庫，使用者可以根據自己的需求，下載套件來使用。\n但線上的套件，會因為各種因素、情況，而有新版本的更新， 要如何知道自己現在用的套件有沒有過期？是否有更新的版本， 這時候就可以用以下指令來確認啦。\n# 檢查專案中，使用的 NPM 套件是否過期 npm outdated 他會列出當前你這專案中使用的套件中，有沒有新版本的更新，如果有會列出你當前這個套件的一些當前狀態：\n 版本號 (Current) 滿足 package.json 中指定的 semver 範圍的軟件包的最高版本(Wanted) 最新的版本號 ( Latest ) 所在的專案範圍 (Location)   參考資料 https://docs.npmjs.com/cli-commands/outdated.html\n","id":7,"section":"posts","summary":"NPM 檢查過期套件模組 對於前端開發者來說，相信 NPM (Node Package Manager) 大家一定都不陌生，它是一個線上 JavaScript 套件庫，使用者可以根據自己的需求，下載套件來使用。 但線上的","tags":["NPM"],"title":"NPM 檢查過期套件模組","uri":"https://dizang.io/posts/npm-command-outdated/","year":"2020"},{"content":"tmux 官方說法是 terminal multiplexer，我把它理解為終端機的管理工具，這套工具可以讓你在執行一個終端機的情況下，開啟很多個 session、 視窗等等，對於程式開發人員來說，非常方便。\n如何下載 # mac ruby -e \u0026#34;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)\u0026#34; brew update brew install tmux # ubuntu sudo apt-get install tmux 個人常用的按鍵 # tmux 的一個 session 可以有多個視窗 ，一個視窗可以有多個 pane # 視窗操作 指令 C-b + c ：建立一個新視窗 指令 C-b + n ：移動到下一個視窗 指令 C-b + p ：移動到上一個視窗 指令 C-b + \u0026#34; ：水平分割視窗 指令 C-b + % ：垂直分割視窗 指令 C-b + o ：切換視窗裡分割的 pane 指令 C-b + x ：關閉視窗 指令 C-d ：關閉視窗 指令 C-b d || C-b D 離開此 session：但是這些 session 還是在背景執行。 # session 管理 指令 tmux ：啟用 tmux ，預設會自動建立一個 session 指令 exit ：離開 指令 tmux ls ：列出所有 session 指令 tmux attach -t \u0026lt;session number\u0026gt; ：連去指定的 session 指令 tmux new -s \u0026lt;session name\u0026gt; ：可以自行定義此 session 名稱 指令 tmux rename-session -t \u0026lt;session number\u0026gt; \u0026lt;session name\u0026gt; ： 可以重新定義 session 名稱 指令 tmux kill-session -t \u0026lt;session number\u0026gt; ：刪除 session 參考資料： http://man.openbsd.org/OpenBSD-current/man1/tmux.1\nhttps://github.com/tmux/tmux\n","id":8,"section":"posts","summary":"tmux 官方說法是 terminal multiplexer，我把它理解為終端機的管理工具，這套工具可以讓你在執行一個終端機的情況下，開啟很多個 session、 視窗","tags":["tmux","development"],"title":"終端機工具 Tmux","uri":"https://dizang.io/posts/terminal-tmux/","year":"2019"},{"content":"人到了一個年紀，腦袋的確越來越不好使， 所以需要開始使把經歷過的事情，記錄下來。\n\u0008 在開始之前，對於要用什麼服務，花了一點時間思考， 最終因為以下幾點原因，選擇了 Hugo \u0008\u0008。\n1. 支援 markdown 語法 2. 安裝簡單，易於部署 3. 輕量，快速  詳細比較可參考以下\n網站連結\n官方網站\n","id":9,"section":"posts","summary":"人到了一個年紀，腦袋的確越來越不好使， 所以需要開始使把經歷過的事情，記錄下來。 \u0008 在開始之前，對於要用什麼服務，花了一點時間思考， 最終因為以下","tags":["blog","hugo"],"title":"使用 Hugo 紀錄生活","uri":"https://dizang.io/posts/my_first_post/","year":"2019"}],"tags":[{"title":"blog","uri":"https://dizang.io/tags/blog/"},{"title":"command","uri":"https://dizang.io/tags/command/"},{"title":"CSS","uri":"https://dizang.io/tags/css/"},{"title":"development","uri":"https://dizang.io/tags/development/"},{"title":"Git","uri":"https://dizang.io/tags/git/"},{"title":"hugo","uri":"https://dizang.io/tags/hugo/"},{"title":"NPM","uri":"https://dizang.io/tags/npm/"},{"title":"Python","uri":"https://dizang.io/tags/python/"},{"title":"tmux","uri":"https://dizang.io/tags/tmux/"}]}